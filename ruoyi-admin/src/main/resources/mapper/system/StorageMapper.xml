<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ruoyi.system.mapper.StorageMapper">

    <resultMap type="Storage" id="StorageResult">
        <result property="id"    column="id"    />
        <result property="materialcode"    column="materialcode"    />
        <result property="price"    column="price"    />
        <result property="stocks"    column="stocks"    />
        <result property="money"    column="money"    />
        <result property="typeId"    column="type_id"    />
        <result property="deptId"    column="dept_id"    />
        <result property="materialId"    column="material_id"    />
        <result property="uTime"    column="u_time"    />
        <result property="oTime"    column="o_time"    />
        <result property="qTime"    column="q_time"    />
        <result property="ancestors"    column="ancestors"    />
        <result property="deptName"    column="dept_name"    />
        <result property="name"    column="name"    />
        <result property="materialcode"    column="materialcode"    />
        <result property="partnumber"    column="partnumber"    />
        <result property="description"    column="description"    />
        <result property="footprint"    column="footprint"    />
        <result property="manufacture"    column="manufacture"    />
        <result property="securitystock"    column="securitystock"    />
        <association property="storagetype" column="dept_id" javaType="Storagetype" >
        </association>
        <collection property="materialChildList"
                    select="com.ruoyi.system.mapper.MaterialChildMapper.selectMaterialChildByMaterialId"
                    column="material_id"
        />
    </resultMap>









    <sql id="selectStorageVo">
        select id, materialcode, price, stocks, money, type_id ,securitystock from st_list
    </sql>




    <select id="selectStorageListBymaterialcode" resultMap="StorageResult">
      <include refid="selectStorageVo"/>
        where   materialcode = #{materialcode}
    </select>

    <select id="selectStorageList" parameterType="Storage" resultMap="StorageResult">
        select securitystock,s.material_id,s.id,m.materialcode,price,stocks,money,ancestors,dept_name, s.u_time,o_time,q_time from `st_list`  s
        LEFT JOIN st_type s1  on type_id=dept_id
        left JOIN mat_list  m   on m.materialcode=s.materialcode
        left join mat_listchild m1 on m.id=m1.material_id
        <where>
         <if test="name != null  and name != ''"> and m1.name like concat('%', #{name}, '%')</if>
            <if test="description != null  and description != ''"> and m1.description like concat('%', #{description}, '%')</if>
            <if test="footprint != null  and footprint != ''"> and m1.footprint like concat('%', #{footprint}, '%')</if>
            <if test="partnumber != null  and partnumber != ''"> and m1.partnumber like concat('%', #{partnumber}, '%')</if>
            <if test="manufacture != null  and manufacture != ''"> and m1.manufacture = #{manufacture}</if>
            <if test="materialcode != null  and materialcode != ''"> and s.materialcode = #{materialcode}</if>
            <if test="status==2 "> and stocks > 0</if>
            <if test="status==1 "> and stocks = 0</if>
            <if test="securitystock != null  and securitystock != ''"> and stocks &lt; securitystock </if>
            <if test="stocks != null  and stocks != ''"> and s.stocks &lt; #{stocks}</if>
            <if test="deptId != null and deptId != 0">
                AND (s.type_id = #{deptId} OR s.type_id IN ( SELECT t.dept_id FROM st_type t WHERE FIND_IN_SET (#{deptId},ancestors) ))
            </if>
        </where>


    </select>

    <select id="selectStorageById"  resultMap="StorageResult">
        <include refid="selectStorageVo"/>
        where id = #{id}
    </select>




    <insert id="insertStorage" parameterType="Storage" useGeneratedKeys="true" keyProperty="id">
        insert into st_list (materialcode,price,stocks,money,type_id,material_id,u_time)
        values  (#{materialcode},#{price},#{stocks},#{money},#{typeId},#{materialId},now())
    </insert>




    <delete id="deleteStorageByMaterialId">
        delete from st_list where material_id = #{materialId}
    </delete>

    <delete id="deleteStorageById">
        delete  from st_list where id=#{id}
    </delete>


    <select id="selectStorageByMaterialcode" resultMap="StorageResult">

        <include refid="selectStorageVo"/>
        where
        materialcode=#{materialcode}

    </select>
    <select id="selectStorageByMaterialId" resultMap="StorageResult">
        <include refid="selectStorageVo"/>
        where
        material_id=#{materialId}
    </select>
    <select id="selectStorageByDate" resultType="java.util.Map">
        select s.materialcode,
               ( SELECT GROUP_CONCAT(DISTINCT name) from mat_listchild m INNER JOIN mat_list m1 on m.material_id=m1.id
                 where	m1.materialcode=s.materialcode
               ) name,
               ( SELECT GROUP_CONCAT(DISTINCT partnumber) from mat_listchild m INNER JOIN mat_list m1 on m.material_id=m1.id
                 where	m1.materialcode=s.materialcode
               ) partnumber,
               ( SELECT GROUP_CONCAT(DISTINCT unit) from mat_listchild m INNER JOIN mat_list m1 on m.material_id=m1.id
                 where	m1.materialcode=s.materialcode
               ) unit,
               ( SELECT GROUP_CONCAT(DISTINCT s.supplier) from st_inbill s  INNER JOIN st_indetail s1 on s.id=s1.storageinbill_id
                 WHERE c_time &gt;= #{begindate}  and c_time  &lt;= #{enddate}   and del_status=1
                   and	s1.materialcode=s.materialcode
               ) supplier,
               ( SELECT sum(counts) from st_inbill s  INNER JOIN st_indetail s1 on s.id=s1.storageinbill_id
                 WHERE c_time &gt;= #{begindate}  and c_time  &lt;= #{enddate}   and del_status=1
                   and	s1.materialcode=s.materialcode
               ) incount,
               ( SELECT sum(counts)*s.price from st_inbill s  INNER JOIN st_indetail s1 on s.id=s1.storageinbill_id
                 WHERE c_time &gt;= #{begindate}  and c_time  &lt;= #{enddate}   and del_status=1
                   and	s1.materialcode=s.materialcode
               ) inmoney,
               ( SELECT sum(counts) from st_outbill s  INNER JOIN st_outdetail s1 on s.id=s1.storageoutbill_id
                 WHERE c_time &gt;= #{begindate}  and c_time  &lt;= #{enddate}   and del_status=1
                   and	s1.materialcode=s.materialcode
               ) outcount,
               ( SELECT sum(counts)*s.price from st_outbill s  INNER JOIN st_outdetail s1 on s.id=s1.storageoutbill_id
                 WHERE c_time &gt;= #{begindate}  and c_time  &lt;= #{enddate}   and del_status=1
                   and	s1.materialcode=s.materialcode
               ) outmoney,
               stocks,price,money from st_list s
        where u_time &gt;= #{begindate}  and u_time  &lt;= #{enddate}
        or o_time &gt;=#{begindate}  and o_time &lt;= #{enddate}
    </select>


    <update id="updateStorageByMaterialcodeAndTypeId">
         update  st_list set stocks=#{stocks},money=#{money},price=#{price},
         u_time=now()  where materialcode=#{materialcode} and type_id=#{typeId}
    </update>




    <update id="updateStorageById">
        update  st_list set
        <if test="price != null">
            price=#{price},
        </if>
        <if test="oTime != null">
             o_time=now(),
        </if>
        <if test="qTime != null">
             q_time=now(),
        </if>
        stocks=#{stocks},money=#{money}
          where id=#{id}
    </update>
    <update id="settingStock">
        update st_list set securitystock=#{securitystock}
        where id=#{id}
    </update>


</mapper>